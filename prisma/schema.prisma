generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  firstName       String
  lastName        String
  email           String           @unique
  phoneNumber     String?
  role            String           @default("USER")
  newUser         Boolean          @default(true)
  licenses        License[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  licenseRequests LicenseRequest[]
  permissions     UserPermission[]
  supportTickets  TicketsOnUsers[]
}

model License {
  id         String     @id @default(cuid())
  key        String     @unique
  product    Product    @relation(fields: [productId], references: [id])
  productId  String
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    String
  status     String     @default("PENDING")
  duration   Int
  version    String
  startDate  DateTime
  expiryDate DateTime
  deletedAt  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  request    LicenseRequest @relation(fields: [requestId], references: [id])
  requestId  String
}

model Product {
  id              String           @id @default(cuid())
  name            String
  description     String
  features        String
  image           Bytes?
  durations       String
  versions        String
  licenses        License[]
  licenseRequests LicenseRequest[]
}

model LicenseRequest {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  duration    Int
  message     String?
  companyName String
  status      String     @default("PENDING")
  version     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  licenses    License[]
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  role         String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([role, permissionId])
}

model UserPermission {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([userId, permissionId])
}

model QuoteRequest {
  id          String   @id @default(cuid())
  fullName    String
  email       String
  phoneNumber String?
  companyName String?
  companySize String?
  interests   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Maintenance {
  id          String   @id @default(cuid())
  fullName    String
  companyName String?
  email       String
  phoneNumber String?
  companySize String?
  needs       String  
  description String
  status      String   @default("PENDING")  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InstructionDocument {
  id          String               @id @default(cuid())
  title       String
  files       String   
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  tickets     TicketsOnDocuments[]
}

model SupportTicket {
  id              String              @id @default(cuid())
  customerName    String
  companyName     String
  companyAddress  String
  meetDate        DateTime
  meetTime        String
  status          String              @default("OPEN")
  documents       TicketsOnDocuments[]
  supportUsers    TicketsOnUsers[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  rescheduledDate DateTime?
  rescheduledTime String?
}

model TicketsOnDocuments {
  ticket          SupportTicket       @relation(fields: [ticketId], references: [id])
  ticketId        String
  document        InstructionDocument @relation(fields: [documentId], references: [id])
  documentId      String
  assignedAt      DateTime            @default(now())

  @@id([ticketId, documentId])
}

model TicketsOnUsers {
  ticket          SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId        String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  assignedAt      DateTime      @default(now())

  @@id([ticketId, userId])
}